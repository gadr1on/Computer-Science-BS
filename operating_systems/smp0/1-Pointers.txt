Pointers in C
-------------

1) Consider the following C program.
#include <string.h>
int main(int argc, char *argv[])
{
  char *temp;
  strcpy(temp, argv[0]);
  return 0;
}

Why is the above code incorrect (i.e., likely to crash)?
##################################################################################
SOL: Since argv[0] is copied at locationtemp. Which is not initialized & locating
to garbage location. Hence it might crash at run time.
##################################################################################

2) Consider the following C program.
#include <string.h>
int main(int argc, char *argv[])
{
  char temp[9];
  strcpy(temp, argv[0]);
  return 0;
}

A buffer overflow occurs when the program name is 9 characters long
(e.g., "12345.exe"). Why?
##################################################################################
SOL: when we copy the 9 characters at location of temp, then the 9 characters are
copied at 9 positions of array, but the null character of string is copied to
10th position of array which is not allocated hence it is buffer overflow.
##################################################################################

3) Consider the following C program.
#include <string.h>
int main(int argc, char *argv[])
{
  char *buffer = "Hello";
  strcpy(buffer, "World");
  return 0;
}

Why does this program crash?
##################################################################################
SOL: Since we are over writing the content of buffer which is initialized by
the constant memory content.
##################################################################################

4) Consider the following C snippet.
void myfunc()
{
  char b[100];
  char *buffer = &b[0];
  strcpy(buffer, "World");
}

Is this correct?  What's a simpler expression for &b[0]?
##################################################################################
SOL: Yes it is correct, It is copying the World with null character at last, inside
the array b.
##################################################################################

5) Consider the following C program.
#include <stdio.h>
int main(int argc, char* argv[])
{
  printf("%s %s %s\n", *argv, (*(argv+1)) + 2, *(argv+2));
  return 0;
}

If this code is executed using the following line, what will be the output?
##################################################################################
SOL: output will be program1 5abc
##################################################################################

6) Consider the following C program.
#include <stdio.h>
#include <string.h>
char *myfunc(char **argv)
{
  char buffer[100];
  strcpy(buffer, "hello");
  return buffer;
}
int main(int argc, char *argv[])
{
  char *s = myfunc(argv);
  printf("%s\n", s);
}

What's wrong with this?
##################################################################################
SOL: Because the buffer return by myfunc does not exist as the function return,
hence s will hold the location which does not exist after returning from the function.
##################################################################################
